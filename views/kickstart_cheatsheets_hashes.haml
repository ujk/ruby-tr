-# coding: UTF-8

%script
  document.title = "Ruby Türkiye - Kickstart - Hashes"

%div.row
  %div.leaderboard
    %h1 Ruby Hash Kullanım Klavuzu 
    %h4 
      Orjinali : 
      %a(href="https://github.com/JoshCheek/ruby-kickstart/blob/master/cheatsheets/hashes.rb" target="_blank") Ruby-Kickstart
    %h4 Çeviren : Ümit Kayacık

%br

%div.row
  %div.span12
    %h4.sag hashes.rb
    
    :coderay
      #!Ruby
      # http://ruby-doc.org/core/classes/Hash.html
      
      
      # =====  Tanımlama  =====
      # yaygınlaşan şekil
      { 1 => 'one' , 2 => 'two' } # => {1=>"one", 2=>"two"}
      Hash[ 1,'one' , 2,'two' ]   # => {1=>"one", 2=>"two"}

      # boş tanımlama
      {}                          # => {}
      Hash.new                    # => {}
      
      
      # =====  Olmayan Key'ler  =====
      # default olarak, olmayan key nil değeri ile döner
      hash = Hash.new   # => {}
      hash[:josh]       # => nil
      
      # bu davranışı değiştirmek için, hash ve olmayan key'i alıp oraya istediğiniz nesneyi 
      # yerleştiren bir blok yazabilirsiniz
      aliases = Hash.new { |this_hash, key| this_hash[key] = Array.new }
      aliases         # => {}
      aliases[:josh]  # => []
      aliases         # => {:josh=>[]}
      aliases[:jeff] << 'the dude' << 'his dudeness' << 'duder' << 'el duderino'
      aliases         # => {:josh=>[], :jeff=>["the dude", "his dudeness", "duder", "el duderino"]}
      
      
      # =====  Erişim ve Atama  =====
      # genelde erişim ve atama şöyledir
      hash = Hash.new
      hash                          # => {}
      hash["my key"] = "my value"
      hash                          # => {"my key"=>"my value"}
      hash["my key"]                # => "my value"
      
      # birçok değere birden erişim
      hash = Hash[ *[ Array('a'..'j') , Array(1..10) ].transpose.flatten ] # sadece değer olsun diye
      hash                                  # => {"a"=>1, "b"=>2, "c"=>3, "d"=>4, "e"=>5, "f"=>6, "g"=>7, "h"=>8, "i"=>9, "j"=>10}
      hash.values_at 'j' , 'e' , 'i' , :x   # => [10, 5, 9, nil]
      
      # fetch ile daha enteresan opsiyonlar (bunun parametrelere default değer verirken faydalarını düşünün)
      hash = { "a" => 100, "b" => 200 }
      hash.fetch "a"                              # => 100
      hash.fetch "z" , "go fish"                  # => "go fish"
      hash.fetch("z") { |el| "go fish, \#{el}"}    # => "go fish, z"

      # Bazen has_key ile biy key'in olup olmadığını test debilirsiniz, örneğin, aşağıdaki gibi
      hash = Hash.new { true }
      hash[:a] = :b
      hash[1000]                                  # => true
      hash.has_key? 1000                          # => false
      
      hash = { 12 => nil }
      hash[12]                                    # => nil
      hash[13]                                    # => nil
      hash.has_key? 12                            # => true
      hash.has_key? 13                            # => false
      
      # ve tersi
      hash = { "a" => 100, "b" => 200 }
      hash.has_value?(100)                        # => true
      hash.has_value?(999)                        # => false
      
      
      # =====  Silme  =====
      # delete metodu key'i siler ve değerini döner. Eğer metoda bir blok tanımlarsanız
      # key bulunamadığında bloğu işler ve sonucunu döner
      hash = Hash[*Array(1..10)]                  # => {1=>2, 3=>4, 5=>6, 7=>8, 9=>10}
      hash.delete 1                               # => 2
      hash.delete 100                             # => nil
      hash                                        # => {3=>4, 5=>6, 7=>8, 9=>10}
      hash.delete(3)   { |n| "\#{n} not found" }   # => 4
      hash.delete(100) { |n| "\#{n} not found" }   # => "100 not found"
      
      # delete_if arkasından gelen bloğun sonucu true olursa çalışır
      hash = Hash[*Array(1..10)]                  # => {1=>2, 3=>4, 5=>6, 7=>8, 9=>10}
      hash.delete_if do |key,value|
        key % 5 == 0 || value % 5 == 0
      end
      hash                                        # => {1=>2, 3=>4, 7=>8}
      
      
      # =====  Iterasyon  =====
      # key ve değerlere ulaşan bir blok yazılabilir
      cities = { :Chicago => :USA , :Paris => :France , :Ramstein => :Germany }
      results = Array.new
      cities.each do |city,country|
        results << "\#{city} is in \#{country}"
      end
      results # => ["Chicago is in USA", "Paris is in France", "Ramstein is in Germany"]
      
      
      # =====  Diğer Kullanışlı Metodlar  =====
      
      # ayrıca dönüştürücü bir versiyon da vardır: merge!
      defaults = { :color => :red , :city => 'Wichita' }
      custom   = { :city => 'Boston' }
      merged   = defaults.merge custom
      defaults                       # => {:color=>:red, :city=>"Wichita"}
      custom                        # => {:city=>"Boston"}
      merged                        # => {:color=>:red, :city=>"Boston"}
      
      cities = { :Chicago => :USA , :Paris => :France , :Ramstein => :Germany }
      cities.keys                   # => [:Chicago, :Paris, :Ramstein]
      cities.values                 # => [:USA, :France, :Germany]
      cities.length                 # => 3
      cities.size                    # => 3
      cities.empty?               # => false
      Hash.new.empty?               # => true
      
      
      hash = Hash[*Array(1..10)]
      hash                          # => {1=>2, 3=>4, 5=>6, 7=>8, 9=>10}
      hash.clear
      hash                          # => {}
      
      # verilen bir değerin key'ini bulmak (unutmayın, aynı değerde birden çok key olabilir)
      hash = { "a" => 100, "b" => 200 }
      hash.index(200)               # => "b" # !> Hash#index is deprecated; use Hash#key
      hash.index(999)               # => nil # !> Hash#index is deprecated; use Hash#key
      
      # keyleri ve değerlerini değiştirmek (swap)
      hash = { :n => 1, :m => 1, :o => 2 }  # n ve m aynı değere sahip, ters çevirince n yok olacak
      hash.invert                   # => {1=>:m, 2=>:o}
      
      # array'e dönüştürmek
      { :Chicago => :USA , :Paris => :France , :Ramstein => :Germany }.to_a # => [[:Chicago, :USA], [:Paris, :France], [:Ramstein, :Germany]]
    %br



%hr

#disqus_thread
%script(type="text/javascript" async="true" src="http://ruby-tr.disqus.com/embed.js")
  
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
