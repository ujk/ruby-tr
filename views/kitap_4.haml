-# coding: UTF-8

%div.row
  %div.leaderboard
    %h1 Bölüm 4 
    %h4 
      Yazar : 
      %a(href="http://twitter.com/#!/huwcol" target="_blank") Huw Collingbourne
      \- 
      %a(href="http://www.sapphiresteel.com/" target="_blank") www.sapphiresteel.com
    %h4 Çeviren : Ümit Kayacık

%br

%div.row
  %div.span12
    %h3  Array'ler ve Hash
    %p 
      Şimdiye kadar objeleri birer birer kullanıyorduk. Bu bölümde bir nesneler 
      listesini nasıl üreteceğimizi göreceğiz. En yaygın kullanılan biri ile 
      başlayacağız , bir array.
    %h3 ARRAY
    %h4.sag array0.rb
    :coderay
      #!Ruby
      # The Book of Ruby - http://www.sapphiresteel.com
      
      def array_length( anArray )
        return anArray.length
      end
      
      a0 = [1,2,3,4,5]	
      a1 = [1,'two', 3.0, array_length( a0 ) ]
      
      p( a0 )
      p( a1 )
      puts( "a1'in index #0 elemanı = \#{a1[0]}, #3 elemanı \#{a1[3]}" )
    %br
    
    .alert.alert-info
      %p
        %b Array ne demek?
      %p
        Bir array, her biri indexlenebilen elemanlardan oluşan sıralı bir elemean 
        listesidir. Ruby'de (birçok diğer dillerin aksine) bir Array içinde stringler, 
        tam sayılar, noktalı sayılar, hatta metod çağrıları gibi farklı 
        tiplerde nesneler bulunabilir:
      %br
      :coderay
        #!Ruby
        a1 = [1,'two', 3.0, array_length( a0 ) ]
      %br
      %p
        Bir array içindeki ilk eleman index 0'a sahiptir, yani array'deki son eleman 
        "toplam eleman sayısı - 1" indexine sahiptir. Yukarıda verilen 
        %b a1 
        array'inde ilk ve son elemanların nasıl alınacağı gösterilmiştir. 
      %br
      :coderay
        #!Ruby
        a1[0]  # 1. elamanı verir (index 0)
        a1[3]  # 4. elemanı verir (index 3) 
    %br
    
    %p
      Daha önce array yapısını birkaç defa kullandık. Mesela, bölüm 2'deki 
      %b 2adventure.rb' 
      de Room nesnelerini saklamak için bir array kullandık:
    %br
    :coderay
      #!Ruby
      mymap = Map.new([room1,room2,room3])
    %br
    
    %h3 ARRAY'LERİN ÜRETİLMESİ
    %p
      Genelde diğer birçok programlama dilleri gibi, Ruby de array'leri belirtmek 
      için köşeli parantez kullanır. Köşeli parantez içinde nesneleri virgülle 
      ayırarak ve bir değişkene eşitleyerek kolayca bir array üretebilirsiniz. 
    %br
    %h4.sag array1.rb
    :coderay
      #!Ruby
      # The Book of Ruby - http://www.sapphiresteel.com

      arr = ['a', 'b', 'c']

      puts(arr[0])  # 'a' yazar
      puts(arr[1])  # 'b' yazar
      puts(arr[2])  # 'c' yazar

      puts(arr[3]) # nil
    %br
    
    %p
      Ruby'deki diğer şeyler gibi array'ler de birer nesnedir. Tahmin 
      edebileceğiniz gibi Array sınıfı içinde tanımlanırlar ve stringler gibi 0'dan 
      itibaren indexlenirler. Bir array'in içindeki elemanlardan birine onun 
      indexini köşeli parantez içine yazarak erşebilirsiniz. Eğer index geçersizse 
      %b nil 
      değer geri döner.
    %br
    
    %h4.sag array2.rb
    :coderay
      #!Ruby
      # The Book of Ruby - http://www.sapphiresteel.com
      
      def hello
        return "hello world"
      end
        
      x = [1+2, hello,  `dir`]  # array'de bir eşitlik, bir metod çağrısı ve bir string var
      puts(x.inspect)           # Not: Eğer Windows kullanmıyorsanız 
                                #  `dir` komutunu işletim sisteminize göre değiştirmelisiniz
      
      y = %w( bu bir string array )
      puts(y.inspect)
      
      a = Array.new
      puts("Array.new : " << a.inspect)
      
      a = Array.new(2)
      puts("Array.new(2) : " << a.inspect)
      
      a = Array.new(2,"hello world")
      puts(a.inspect)
      
      a = Array.new(2)
      a[0]= Array.new(2,'hello')
      a[1]= Array.new(2,'world')
      puts(a.inspect)
      
      a = [ [1,2,3,4],
          [5,6,7,8],
          [9,10,11,12],
          [13,14,15,16] ]
      puts(a.inspect)
      
      a = Array.new([1,2,3]) 
      puts(a.inspect)
      
      # Not: Yukarıdaki örnekte eğer yuvarlak parantez kullanmadan new() 
      # ile array üretiyorsanız new ve köşeli parantez arasında bir boşluk 
      # bırakmak zorundasınız.
      # Bu çalışır:
      #   a = Array.new [1,2,3]
      # Bu çalışmaz!
      #   a = Array.new[1,2,3]
    %br
    
    %p
      Array içinde veri tiplerinin karışık olmasına izin verilir ve eşitlik içermesine de 
      Diyelim şu metodu tanımlamıştınız:
    %br
    :coderay
      #!Ruby
      def hello
        return "hello world"
      end
    %br
    
    %p Şimdi şöyle bir array tanımlayabilirsiniz:
    :coderay
      #!Ruby
      x = [1+2, hello, `dir`]
    %br
    
    %p
      Burada ilk eleman bir tamsayı olan 3, ve ikincisi string "hello world" (
      %b hello 
      metodunun sonucu dönen değer). Eğer bunu Windows'ta çalıştırırsanız 
      üçüncü array elemanı bulunulan klasördeki dosyaları gösteren bir string 
      olacaktır. Çünkü 
      %b `dir` 
      ters tırnaklı bir stringdir ve işletim sistemi tarafından çalıştırılır (3. bölüme bakınız). 
      Eğer farklı bir işletim sistemindeyseniz son elemanı işletim sistemine uygun 
      komut ile değiştirmeniz gerekir. 
    %br
    
    %h4.sag dir_array.rb
    :coderay
      #!Ruby
      # The Book of Ruby - http://www.sapphiresteel.com
      
      p( Dir.entries( 'C:\\' ) )
    %br
    
    .alert.alert-info
      %p
        %b Dosya İsimlerinden bir Array Oluşturmak
      %p
        Birçok Ruby sınıfları bir array değeri geri dönen metodlara sahiptir. 
        Mesela Dir sınıfı, diskteki klasörler üzerinde işlemler yapmaya yarar. 
        Bu sınıfın 
        %b entries 
        metodu vardır. Bu metoda bir klasör adını verdiğinizde o klasördeki 
        dosya isimlerinden oluşan bir array geri döner:
      %br
      
      :coderay
        #!Ruby
        Dir.entries('C:\\')     # C:\ deki dosya isimlerini döner
      %br
    %br
    
    %p
      Eğer tek tırnaklı stringlerden oluşan bir array yapmak ister ama üstüste 
      tırnak açıp kapamak istemezseniz, 3. bölümde anlatıldığı gibi boşlukla 
      ayırdığınız stringleri bir parantez içine koyup başına 
      %b %w 
      koyabilirsiniz (ya da çift tırnaklı için büyük harf 
      %b %W 
      ).
    %br
    
    %h4.sag array2.rb
    :coderay
      #!Ruby
      
      y = %w( bu stringlerden oluşan bir array )
      puts(y.inspect)
      
    %br
    
    %p
      Array'leri ayrıca nesne üretim metodu 
      %b new 
      kullanarak da yapabilirsiniz. Seçenek olarak 
      %b new 
      metoduna bir sayı parametre vererek o kadar elemanlı bir array üretebilirsiniz 
      (her elemanı nil değer olan). Ya da 2 argüman vererek ilkiyle eleman sayısını , 
      ikinciyle elemanların değerini belirtirsiniz. Şöyle ki:
    %br
    
    :coderay
      #!Ruby
      a = Array.new    # boş bir array
      a = Array.new(2)   # [nil,nil]
      a = Array.new(2,"hello world") # ["hello world","hello world"]
    %br
    
    %h3 Çok Boyutlu Array'ler
    %p
      Çok boyutlu bir array üretmek için bir array üretip her elemanına başka 
      array'ler ekleyebilirsiniz. Örneğin bu kod , iki elemanlı bir array üretir, her 
      elemana kendisi array olan iki değer yüklenir:
    %br
    :coderay
      #!Ruby
      a = Array.new(2)
      a[0]= Array.new(2,'hello')
      a[1]= Array.new(2,'world')
    %br
    
    .alert.alert-info
      %p
        Ayrıca 
        %b new 
        metoduna array argümanlar göndererek de bir array oluşturabilirsiniz. 
        Fakat dikkatli olun. Ruby'de bir süpriz taraf vardır, metod argümanlarını 
        parantez içinde ya da dışında vermek farketmez dense de, eğer new 
        metodundan sonra parantez açmayıp boşluk ile yazmaya kalkarsanız 
        Ruby hata verecektir - parantez kullanma alışkanlığı kazanmak için bir 
        sebep daha.
    %br
    
    %p
      Ayrıca array'leri direk köşeli parantezler kullanarak da içiçe yazabilirsiniz. 
      Bu kod her biri 4 tamsayıdan oluşan 4 array'den oluşmuş bir çok boyutlu 
      array tanımlıyor:
    %br
    
    :coderay
      #!Ruby
      a = [ [1,2,3,4],
      [5,6,7,8],
      [9,10,11,12],
      [13,14,15,16]  ] 
    %br
    
    %p
      Yukarıda gösterilen kodda 4 tane "alt array" i ayrı satırlarda yerleştirdim. 
      Bu zorunlu değil ama bir tablo gibi her alt array'i ayrı satırda göstermek 
      daha net görünmesine yardımcı olur. Bir içiçe array konuşulurken her bir alt 
      array içinde bulunduğu array'in "satırı" olarak da adlandırılır. (çevirmen notu: 
      yukarıdaki kod birden fazla satıra yayılmış bir koddur. Bu durumlarda 
      Ruby'de satır sonlandırma karakteri olmadığı için - ";" gibi - 
      elemanlar arasında bölümleme işlemi yaparken virgül sonrası alt satıra 
      geçilmelidir)
    %br
    
    %h4.sag multi_array.rb
    :coderay
      #!Ruby
      # The Book of Ruby - http://www.sapphiresteel.com
      
      # iki alt-array'li bir array oluşturun  - örn. her biri 4 elemanlı 2 'satır'
      multiarr = [['one','two','three','four'], # multiarr[0]
                [1,2,3,4]]                      # multiarr[1]
      
      # multiarr'nin elemanları (satırları) üzerinde iterasyon
      puts( "for i in.. (multi-dimensional array)" )
      for i in multiarr
        puts(i.inspect) 
      end
      
      puts( "\nfor a, b, c, d in.. (multi-dimensional array)" )
      for (a,b,c,d) in multiarr
        print("a=\#{a}, b=\#{b}, c=\#{c}, d=\#{d}\n" )
      end
    %br
    
    %p
      Çok boyutlu arra'ler hakkında daha fazla örnek için 
      %b multi_array.rb 
      programını çalıştırın. Bu program içinde iki diğer array 
      %b multiarr 
      adında bir array üreterek başlar. Bu array'lerin ilki 
      %b multiarr' 
      nin index 0'ındadır , ikincisi index 1'inde:
    %br
    
    :coderay
      #!Ruby
      multiarr = [['one','two','three','four'],[1,2,3,4]]
    %br
    
    %h3 Array Üzerinde İterasyon
    
    %p
      Bir array'in elemanları üzerinde 
      %b for 
      döngüsü ile iterasyon yapabilirsiniz. Burdaki döngü iki eleman üzerinden 
      iterasyon yapıyor, index 0 ve 1'deki alt array'ler:
    %br
    
    :coderay
      #!Ruby
      for i  in multiarr
        puts(i.inspect) 
      end
    %br
    
    %p Bu şu çıktıyı verir:
    
    :coderay
      #!Ruby
      ["one", "two", "three", "four"]
      [1, 2, 3, 4] 
    %br
    
    %p
      Bu durumda, iki alt array'in elemanları üzerinde nasıl iterasyon yapacağız? 
      Eğer sabit sayıda eleman varsa her birisi için ayrı bir iterasyon değişkeni 
      kullanılabilir. Her değişken karşı gelen array elemanıyla eşleşecektir. 
    %p
      Burada biz dört alt array sahibiyiz, bu durumda bu değişkenleri şöyle 
      kullanabilirsiniz:
    %br
    
    :coderay
      #!Ruby
      for (a,b,c,d) in multiarr
        print("a=\#{a}, b=\#{b}, c=\#{c}, d=\#{d}\n" )
      end 
    %br
    
    .alert.alert-info
      %p
        %b İteratörler ve For Döngüleri
        %br
        Bir 
        %b for 
        döngüsü içinde verilen bir eşitliğin her elemanı için bir kere işlemler gerçekleştirilir. 
        Deyim şöyle düşünülebilir:
        %br
        
        :coderay
          #!Ruby
          for <bir yada daha çok değişken> in <eşitlik> do
            <çalışacak kod>
          end
        %br
        
        Ne zaman birden fazla değişken verilirse, bunlar 
        %b for..end 
        bloğuna sanki bir metodun argümanlarıymış gibi gönderilir. Örneğin buradaki 
        örnekte 
        %b (a,b,c,d) 
        yi 
        %b for 
        döngüsüne verilen dört argüman gibi düşünebilirsiniz. 
        %b For 
        döngüsünün her turunda bu dört değişken 
        %b multiarr 
        satırlarından değerlerini alırlar :
        %br
        
        :coderay
          #!Ruby
          for (a,b,c,d) in multiarr
            print("a=\#{a}, b=\#{b}, c=\#{c}, d=\#{d}\n" )
          end 
        %br
        
        Bir sonraki bölümde 
        %b for 
        döngüleri ve diğer iteratörleri daha derinden inceleyeceğiz.
      %p
    
    %br
    %br
    %h4.sag multi_array2.rb
    
    %p
      Ayrıca 
      %b for 
      döngüsünü tüm alt arrayler için bağımsız kullanabilirsiniz
    %br
    
    :coderay
      #!Ruby
      for s in multiarr[0] 
        puts(s) 
      end
      for s in multiarr[1] 
        puts(s) 
      end
    %br
    
    %p
      Yukardaki her iki teknik (çoklu iteratör değişkenleri ya da çoklu 
      %b for 
      döngüleri) iki şeye ihtiyaç duyar. a) arrayde kaç satır ya da sütun olduğunu 
      biliyorsunuzdur ve b) her alt array aynı sayıda eleman içerir.
    %p
      Çok boyutlu array üzerinde iterasyon yapmak için daha esnek bir yol için 
      içiçe 
      %b for 
      döngüleri kullanabilirsiniz:
    %br
    
    :coderay
      #!Ruby
      for row in multiarr
        for item in row
          puts(item) 
        end
      end
    %br
    %br
    %br
    
    %h3 Array İçini İndexlemek
    
    %p
      Stringlerde gördüğümüz üzere (3. bölüme bakınız) array içinde de eksi işareti 
      kullanarak indexleme yapabilirsiniz. Bu durumda -1 arraydeki son elemanı 
      gösterecektir. Ayrıca range de kullanabilirsiniz:
    
    %h4.sag array_index.rb
    
    :coderay
      #!Ruby
      arr = ['h','e','l','l','o',' ','w','o','r','l','d']
      
      print( arr[0,5] )    #=> „hello‟
      print( arr[-5,5 ] )    #=> „world‟
      print( arr[0..4] )    #=> „hello‟
      print( arr[-5..-1] )   #=> „world‟
    %br
    
    %p
      Dikkat ederseniz stringlerdeki gibi arrayin bir kısmını almak için iki tamsayı 
      veriyoruz. İlk tamsayı sıranın başlangıç indexini , ikinci tamsayı kaç tane 
      eleman alınacağını gösteriyor (ikinci sayı index değil):
    %br
    
    :coderay
      #!Ruby
      arr[0,5]        #cevap 5 karakter - ["h","e","l","l","o"]
    %br
    
    %h4.sag array_assign.rb
    
    %p
      Ayrıca indexleme yoluyla array içinde atamalar da yapabilirsiniz. Örneğin 
      burada ben önce boş bir array tanımlıyorum, sonra index 0, 1 ve 3'e değerler 
      atıyorum. Boş olan 2 numaralı göz değeriyse nil olacaktır:
    %br
    
    :coderay
      #!Ruby
      arr = [] 
      
      arr[0] = [0]
      arr[1] = ["one"]
      arr[3] = ["a", "b", "c"]
      
      # arr şöyle oldu:
      # [[0], ["one"], nil, ["a", "b", "c"]]
    %br
    
    %p Bir kez daha, baş-son indexleri, range ve negatif index değerler kullanabilirsiniz:
    %br
    
    :coderay
      #!Ruby
      arr2 = ['h','e','l','l','o',' ','w','o','r','l','d']
      
      arr2[0] = 'H'
      arr2[2,2] = 'L', 'L'
      arr2[4..6] = 'O','-','W'
      arr2[-4,4] = 'a','l','d','o'
      
      # arr2 şöyle oldu:
      # ["H", "e", "L", "L", "O", "-", "W", "a", "l", "d", "o"]
    %br
    %br
    %br
    
    %h3 Array Kopyalamak
    
    %p
      Dikkat edin atama operatörü = ile bir array diğerine eşitlenirse, yeni değişken 
      hala eski arrayi gösterir. Bir kopya almıyorsunuz, aynı nesneyi göstermesini 
      sağlıyorsunuz. Array kopyasını almak için 
      %b clone 
      metodunu kullanabilirsiniz:
    %br
    
    %h4.sag array_copy.rb
    
    :coderay
      #!Ruby
      arr1=['h','e','l','l','o',' ','w','o','r','l','d']
      arr2=arr1
          # arr2 şimdi arr1 ile aynı. arr1'deki değişim arr2'yi de değiştirir!
      arr3=arr1.clone
          # arr3 şimdi arr1'in kopyası. arr1 değişir ve arr2 etkilenmez
    %br
    
    
    
    56
    %h3 Devam Edecek...

    %p.orta Copyright © 2009 Huw Collingbourne
    
    %hr
    %a.btn.btn-large.btn-success.pull-left(href="/kitap/3")
      %i.icon-backward.icon-white
      Bölüm 3 Stringler ve Range
    %a.btn.btn-large.btn-success.pull-right(href="/kitap/5")
      Bölüm 5 Çevrim ve İterasyonlar
      %i.icon-forward.icon-white


%hr

#disqus_thread
%script(type="text/javascript" async="true" src="http://ruby-tr.disqus.com/embed.js")
  
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
